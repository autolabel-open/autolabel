import os
import socket
import struct
import subprocess
import sys

import docker
from loguru import logger

from config_filter import container_names, hack_ips_orig
from settings import settings


def ip2str(ip):
    packedIP = socket.inet_aton(ip)
    return "0x{:08x}".format(struct.unpack("!L", packedIP)[0])


if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("需要有一个参数INSTANCE")
        exit(1)

    INSTANCE = sys.argv[1]
    os.system(f"cp filter.c filter_{INSTANCE}.c")

    pids = []
    client = docker.from_env()
    for cnm in container_names:
        try:
            container = client.containers.get(cnm)
            pid = container.attrs["State"]["Pid"]
            pids.append(pid)
        except Exception as e:
            logger.exception(e)
            exit(0)

    logger.info(pids)

    key_ips = []
    src_ips = []
    gateway_ips = []
    dst_ips = []

    for pid in pids:
        logger.info(f"Processing {pid}:")

        pid_key_ips = []
        pid_src_ips = []
        pid_gateway_ips = []
        pid_dst_ips = []

        for key, val in hack_ips_orig.items():
            cmd = f"sudo nsenter -t {pid} -n -- {settings.python_executable} ns_route.py {key} {val}"
            logger.info(cmd)
            res = subprocess.run(
                cmd,
                shell=True,
                capture_output=True,
                text=True,
            )
            if res.returncode != 0:
                logger.error("Return code != 0")
                logger.error(res.stderr)
                exit(1)
            src_ip, gateway_ip = res.stdout.strip().split()
            logger.info(f"{key}: {src_ip} {val}: {gateway_ip}")
            pid_key_ips.append(ip2str(key))
            pid_src_ips.append(ip2str(src_ip))
            pid_gateway_ips.append(ip2str(gateway_ip))
            pid_dst_ips.append(ip2str(val))

        key_ips.append(pid_key_ips)
        src_ips.append(pid_src_ips)
        gateway_ips.append(pid_gateway_ips)
        dst_ips.append(pid_dst_ips)

    pid_str = ", ".join([str(pid) for pid in pids])
    len_pid_str = f"#define CONTAINER_NUMS {len(pids)}\n"
    pid_str = f"const int container_pids[] = {{{pid_str}}};\n\n"
    len_str = f"#define HACK_LEN {len(hack_ips_orig)}\n"

    pid_key_ip_strs = []
    key_ip_str = "const int key_ips[CONTAINER_NUMS][HACK_LEN] = {\n    "
    for pid_key_ips in key_ips:
        pid_key_ip_str = ", ".join(pid_key_ips)
        pid_key_ip_strs.append(f"{{{pid_key_ip_str}}}")
    key_ip_str += ",\n    ".join(pid_key_ip_strs)
    key_ip_str += "\n};\n"

    pid_src_ip_strs = []
    src_ip_str = "const int src_ips[CONTAINER_NUMS][HACK_LEN] = {\n    "
    for pid_src_ips in src_ips:
        pid_src_ip_str = ", ".join(pid_src_ips)
        pid_src_ip_strs.append(f"{{{pid_src_ip_str}}}")
    src_ip_str += ",\n    ".join(pid_src_ip_strs)
    src_ip_str += "\n};\n"

    pid_gateway_ip_strs = []
    gateway_ip_str = "const int gateway_ips[CONTAINER_NUMS][HACK_LEN] = {\n    "
    for pid_gateway_ips in gateway_ips:
        pid_gateway_ip_str = ", ".join(pid_gateway_ips)
        pid_gateway_ip_strs.append(f"{{{pid_gateway_ip_str}}}")
    gateway_ip_str += ",\n    ".join(pid_gateway_ip_strs)
    gateway_ip_str += "\n};\n"

    pid_dst_ip_strs = []
    dst_ip_str = "const int dst_ips[CONTAINER_NUMS][HACK_LEN] = {\n    "
    for pid_dst_ips in dst_ips:
        pid_dst_ip_str = ", ".join(pid_dst_ips)
        pid_dst_ip_strs.append(f"{{{pid_dst_ip_str}}}")
    dst_ip_str += ",\n    ".join(pid_dst_ip_strs)
    dst_ip_str += "\n};\n"

    with open("filter.h", "w") as out:
        out.write("// Auto generated by configure.py.\n")
        out.write("// Do not change it manually.\n\n")
        out.write(
            len_pid_str
            + pid_str
            + len_str
            + key_ip_str
            + src_ip_str
            + gateway_ip_str
            + dst_ip_str
        )
