import io
import os
import random
import time

import requests

target_url = os.environ.get("TARGET_URL", None)

session = requests.Session()
csrf = ""


def randstr():
    return "".join(random.choices("abcdefghijklmnopqrstuvwxyz", k=8))


def login():
    global session
    global csrf
    headers = {
        "User-Agent": "User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
    }
    res = session.get(
        f"{target_url}/login",
        headers=headers,
    )
    # csrf = res.json()["response"]["csrf_token"]
    content = res.text
    csrf = content.partition("csrf_token")[2].partition('value="')[2].partition('"')[0]
    print(csrf)

    res = session.post(
        f"{target_url}/authenticate/login",
        data={
            "next": "/",
            "csrf_token": csrf,
            "email": "vulhub@example.com",
            "password": "vulhub",
            "internal_button": "Login",
            "language": "en",
        },
        headers={
            "User-Agent": "User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
            "Content-Type": "application/x-www-form-urlencoded",
        },
    )

    res = session.get(
        f"{target_url}/browser/",
        headers={
            "User-Agent": "User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
        },
    )


login()

start_time = time.time()
paths = []

epoch = 0
while True:
    epoch += 1
    cur_time = time.time()
    runtime = cur_time - start_time
    if runtime < epoch:
        time.sleep(epoch - (cur_time - start_time))

    # 正常行为（文件写）
    trans_id = session.post(
        f"{target_url}/file_manager/init",
        json={
            "dialog_type": "storage_dialog",
            "supported_types": ["sql", "csv", "json", "*"],
            "dialog_title": "Storage Manager",
        },
        headers={
            "X-pgA-CSRFToken": csrf,
            "User-Agent": "User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
        },
    ).json()["data"]["transId"]

    print("trans_id:", trans_id)

    path1 = randstr()
    path2 = randstr()
    path3 = randstr()
    content = randstr()

    session.post(
        f"{target_url}/file_manager/filemanager/{trans_id}/",
        json={
            "path": "/",
            "mode": "addfolder",
            "name": path1,
        },
        headers={
            "X-pgA-CSRFToken": csrf,
            "User-Agent": "User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
        },
    )

    session.post(
        f"{target_url}/file_manager/filemanager/{trans_id}/",
        json={
            "path": f"/{path1}/",
            "mode": "addfolder",
            "name": path2,
        },
        headers={
            "X-pgA-CSRFToken": csrf,
            "User-Agent": "User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
        },
    )

    file_content = io.StringIO(content)

    session.post(
        f"{target_url}/file_manager/filemanager/{trans_id}/",
        files={"newfile": (path3 + ".txt", file_content, "text/plain")},
        data={
            "mode": "add",
            "currentpath": f"/{path1}/{path2}/",
        },
        headers={
            "X-pgA-CSRFToken": csrf,
            "User-Agent": "User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
        },
    )

    paths.append(f"/{path1}/{path2}/{path3}.txt")

    dl_path = random.choice(paths)

    res = session.post(
        f"{target_url}/file_manager/filemanager/{trans_id}/",
        json={
            "path": dl_path,
            "mode": "download",
        },
        headers={
            "X-pgA-CSRFToken": csrf,
            "User-Agent": "User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
        },
    )
    print("download from:", dl_path)
    print("downloaded content:", res.text)
