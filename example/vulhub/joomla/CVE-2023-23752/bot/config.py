MAX_DEPTH = 10  # maximum click depth
MIN_DEPTH = 3  # minimum click depth
MAX_WAIT = 3  # maximum amount of time to wait between HTTP requests
MIN_WAIT = 1  # minimum amount of time allowed between HTTP requests
DEBUG = True  # set to True to enable useful console output

# use this single item list to test how a site responds to this crawler
# be sure to comment out the list below it.
# ROOT_URLS = ["https:///digg.com/"]

"""
ROOT_URLS = [
	"https://digg.com/",
	"https://www.yahoo.com",
	"https://www.reddit.com",
	"http://www.cnn.com",
	"http://www.ebay.com",
	"https://en.wikipedia.org/wiki/Main_Page",
	"https://austin.craigslist.org/"
]
"""

import os

import requests

target_url = os.environ.get("TARGET_URL", None)

if target_url is not None:
    ROOT_URLS = [target_url]
else:
    print("No target URL provided.")
    exit(1)


# items can be a URL "https://t.co" or simple string to check for "amazon"
blacklist = [
    "https://t.co",
    "t.umblr.com",
    "messenger.com",
    "itunes.apple.com",
    "l.facebook.com",
    "bit.ly",
    "mediawiki",
    ".css",
    ".ico",
    ".xml",
    "intent/tweet",
    "twitter.com/share",
    "signup",
    "login",
    "dialog/feed?",
    ".png",
    ".jpg",
    ".json",
    ".svg",
    ".gif",
    "zendesk",
    "clickserve",
]

# must use a valid user agent or sites will hate you
USER_AGENT = (
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) "
    "AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36"
)

pre_session = None

pre_session = requests.Session()

res = pre_session.get(f"{target_url}")
tt = res.text

csrf_key = '"csrf.token":"'
pos = tt.find(csrf_key)

csrf_token = tt[pos + len(csrf_key) :].partition('"')[0]
print(csrf_token)


import base64

return_url = target_url + "/"
return_url = base64.b64encode(return_url.encode()).decode()

res = pre_session.post(
    f"{target_url}",
    data={
        "username": "admin",
        "password": "admin",
        "Submit": "",
        "option": "com_users",
        "task": "user.login",
        "return": return_url,
        csrf_token: "1",
    },
)
