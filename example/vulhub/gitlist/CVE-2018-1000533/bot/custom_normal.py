import os
import random
import string
import time
import sys

import requests


def randstr(length: int) -> str:
    return "".join(
        random.choice(string.ascii_letters + string.digits) for _ in range(length)
    )


target_url = os.environ.get("TARGET_URL", None)

if target_url is None:
    print("TARGET_URL is not set")
    exit(1)


print(target_url)


def post(path: str, data: str) -> None:
    path = f"{target_url}{path}"

    headers = {
        "Content-Type": "application/x-www-form-urlencoded",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36",
    }
    res = requests.post(path, headers=headers, data=data)
    print(res.text)


def get(path: str) -> str:
    path = f"{target_url}{path}"

    headers = {
        "Content-Type": "application/x-www-form-urlencoded",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36",
    }
    res = requests.get(path, headers=headers)
    return res.text


def tree_search(cmd: str):
    post(
        "/example/tree/a/search",
        f"query={cmd};",
    )


def get_list():
    get("/")


def get_repo():
    get("/example")


def get_commits():
    branch = random.choice(("master", "dev", "test", randstr(5)))
    get(f"/example/commits/{branch}")


def get_graph():
    branch = random.choice(("master", "dev", "test", randstr(5)))
    get(f"/example/treegraph?branch={branch}")


def get_zip():
    get("/example/zipball/master")


def get_tar():
    get("/example/tarball/master")


actions = [
    lambda: tree_search(randstr(random.randint(5, 10))),
    get_list,
    get_repo,
    get_commits,
    get_graph,
]

if len(sys.argv) > 1:
    actions.extend([get_zip, get_tar])

time.sleep(15)
epoch = 0
start_time = time.time()
while True:
    epoch += 1
    cur_time = time.time()
    runtime = cur_time - start_time
    if runtime < epoch:
        time.sleep(epoch - (cur_time - start_time))
    try:
        random.choice(actions)()
    except:
        pass
